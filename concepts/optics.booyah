# optics game example
# single player version


# model

levelComplete: 
	{ type: "Boolean", value: false }
pieces: 
	buttonStatus: "ready"
selectedPiece: null
lightPath: null
boardSize: ""
targetPiece: null
sprites: []


# action tree

root = 
	inSequence (loop: true) 
	{
		showIntroScreen
		playLevel
		showEnding
	}

playLevel = 
	while(condition: not modelRef("levelComplete"))
	{
		inSequence
		{
			# TODO: detectClicks
			bind(piece: eachof(modelRef("pieces")))
				canvas.monitorCanvasButton(canvas: "#canvas", status: piece.buttonStatus)

			bind(piece: eachof(modelRef("pieces")))
				watch(condition: piece.buttonStatus)
				{
					pressed: 
						setModel(selectedPiece: referenceTo(piece))
				}

				# on drag/drop piece
				# on select piece

			computeLightPath(path: modelRef("lightPath"), pieces: modelRef("pieces"), boardSize: configRef("boardSize"))

			# detect win
			watch(condition: isPieceHit(modelRef("targetPiece").get()))
			{
				true: setModel(levelComplete: true)
			}

			# draw
			setModel(sprites: [])
			call(function: clearCanvas, arguments: [config("canvasName")])

			bind(piece: eachof(modelRef("pieces")))
				drawPiece({ piece: piece, sprite: insert(modelRef("sprites")) })
			drawLight(pieces: modelRef("pieces"), sprites: modelRef("sprites"))
			drawControls(controls: modelRef("controls"), sprites: modelRef("sprites"))

			drawSprites(sprites: modelRef("sprites"), canvas: config("canvasName"))
		}
	}



# config sets

levelComplete =
	levelComplete: true


# actions

modelRef = (name) ->
	get() -> return model.get(name)
	set(value) -> model.set(name, value)

insertInto = (array) ->
	get() -> return null
	set(value) -> array.push(value)
