spawn = require "win-spawn"
fs = require "fs.extra"
path = require "path"
glob = require "glob"

path_to_site = "../public"
path_to_gh_pages = ".temp_ghpages"
path_to_bin = "node_modules/.bin"

debugging = false


genericCallBack = (callback) -> 
  (error) -> 
    if error 
      console.log("Caught error in callback", error)
      throw new Error("ERROR: #{error}")
    if callback then callback()

spawnCall = (func, args, debug, callback) ->
  if debugging then console.log("Lanching subtask "+debug+" (spawn "+func+" "+args.join(" ")+")")
  try
    call = spawn func, args
    call.stdout.on 'data', (data) -> console.log data.toString().trim()
    call.stderr.on 'data', (data) -> console.log data.toString().trim()
    if debugging then console.log "subtask "+debug+" (spawn "+func+" "+args+") finished"
    call.on "exit", genericCallBack(callback)
  catch e
    console.log("Error running spawn", e)
    callback(e)

spawnCallStdout = (func, args, debug, callback) ->
  localData = ""
  call = spawn func, args
  call.stdout.on 'data', (data) ->
    localData += data.toString().trim()
  call.stderr.on 'data', (data) -> console.log data.toString().trim()
  if debugging then console.log "subtask "+debug+" (spawn "+func+" "+args+") finished"
  call.on "exit", (code) -> callback(code, localData)

build = (callback) ->
  spawnCall "#{path_to_bin}/coffee", ['-c', '-o', path_to_site, 'src'], "build", callback

getTestsResults = (callback) ->
  spawnCallStdout "#{path_to_bin}/phantomjs", [path_to_site + '/lib/phantom-jasmine/run_jasmine_test.coffee', path_to_site + '/tests/phantom.html'], "phantomjs/phantom-jasmine test", callback

runTests = (callback) ->
  getTestsResults (err, res) ->
    if err
      throw new Error("Tests failed: err="+err+":\n"+res)
    else
      callback()

reset = (callback) ->
  spawnCall 'git', ['--git-dir='+path_to_gh_pages+'/.git', '--work-tree='+path_to_gh_pages, 'reset', '-q'], "git reset gh-pages", callback

clone = (callback) ->
  fs.rmrf path_to_gh_pages, genericCallBack -> 
    spawnCall 'git', ['clone', '-n', '-b', 'gh-pages', 'https://github.com/CyberCRI/gamEvolve.git', path_to_gh_pages], "git clone into gh-pages", ->
      reset(callback)

getLog = (callback) ->
  spawnCallStdout 'git', ['log', 'master', '-1', '--pretty=%B'], "git get log in gh-pages", callback

# to add all new files
addAllGhPages = (callback) ->
  spawnCall 'git', ['--git-dir='+path_to_gh_pages+'/.git', '--work-tree='+path_to_gh_pages, 'add', '-A'], "git add all gh-pages", callback

# todo: log commit msg
commitGhPages = (msg, callback) ->
  spawnCall 'git', ['--git-dir='+path_to_gh_pages+'/.git', '--work-tree='+path_to_gh_pages, 'commit', '-am', msg, '-q'], "git commit gh-pages", callback

pushGhPages = (callback) ->
  spawnCall 'git', ['--git-dir='+path_to_gh_pages+'/.git', '--work-tree='+path_to_gh_pages, 'push', '-u', 'origin', 'gh-pages'], "git push gh-pages", callback

deploy = (callback) ->
  build ->
    clone ->
      fs.copyRecursive path_to_site, path_to_gh_pages, genericCallBack ->
        getLog (err, msg) ->
          if err then throw new Error("getLog failed "+err)
          addAllGhPages ->
            commitGhPages msg, genericCallBack ->
              pushGhPages callback

task 'build', 'build once', ->
  build()

task 'watch', 'continually build with --watch', ->
  spawnCall "#{path_to_bin}/coffee", ['-cw', '-o', path_to_site, 'src'], "watch"

task 'doc', 'create documentation', ->
  srcFiles = glob.sync("src/*.coffee")
  testFiles = glob.sync("src/tests/*.coffee")
  spawnCall "#{path_to_bin}/docco", srcFiles.concat(testFiles), "create doc"

task 'deploy', 'deploy on gh-pages', ->
  deploy()

task 'test', 'test GE', ->
  phantomjs = spawn "#{path_to_bin}/phantomjs", [path_to_site + '/lib/phantom-jasmine/run_jasmine_test.coffee', path_to_site + '/tests/phantom.html']
  phantomjs.stdout.on 'data', (data) -> console.log data.toString().trim()
  phantomjs.on "exit", (code) -> 
    console.log "exited with code #{code}"
    if code != 0 then throw new Error("Tests failed")

