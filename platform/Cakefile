spawn = require "win-spawn"
fsextra = require "fs.extra"
fs = require "fs"
path = require "path"

path_to_site = "site"
path_to_gh_pages = ".temp_ghpages"


###
file structure

directory
  gamEvolve
    platform
      .temp_ghpages
        .git
    .git
###


spawnCall = (func, args, debug, callback) ->
  name = "subtask "+debug+" (spawn "+func+" "+args+")"
  call = spawn func, args
  call.stdout.on 'data', (data) -> console.log data.toString().trim()
  console.log name+" finished"
  call.on "exit", genericCallBack(callback)

spawnCallStdout = (func, args, debug, callback) ->
  localData = ""
  name = "subtask "+debug+" (spawn "+func+" "+args+")"
  call = spawn func, args
  call.stdout.on 'data', (data) ->
    localData += data.toString().trim()
  console.log name+" finished"
  call.on "exit", (code) -> callback(code, localData)

build = (callback) ->
  spawnCall 'coffee', ['-c', '-o', 'site', 'src'], "build", callback

genericCallBack = (callback) -> 
  (error) -> 
    if error then throw new Error("ERROR: #{error}")
    if callback then callback()
  
reset = (callback) ->
  spawnCall 'git', ['--git-dir='+path_to_gh_pages+'/.git', '--work-tree='+path_to_gh_pages, 'reset', '-q'], "git reset gh-pages", callback

clone = (callback) ->
  fsextra.rmrf path_to_gh_pages, genericCallBack -> 
    spawnCall 'git', ['clone', '-n', '-b', 'gh-pages', 'https://github.com/CyberCRI/gamEvolve.git', path_to_gh_pages], "git clone into gh-pages", ->
      reset(callback)


# to add all new files
addAllGhPages = (callback) ->
  spawnCall 'git', ['--git-dir='+path_to_gh_pages+'/.git', '--work-tree='+path_to_gh_pages, 'add', '-A'], "git add all gh-pages", callback

# todo: log commit msg
commitGhPages = (msg, callback) ->
  spawnCall 'git', ['--git-dir='+path_to_gh_pages+'/.git', '--work-tree='+path_to_gh_pages, 'commit', '-am', msg, '-q'], "git commit gh-pages", callback

pushGhPages = (callback) ->
  spawnCall 'git', ['--git-dir='+path_to_gh_pages+'/.git', '--work-tree='+path_to_gh_pages, 'push', '-u', 'origin', 'gh-pages'], "git push gh-pages", callback


###
  #commitMaster = (callback) ->

  #pushMaster = (callback) ->
###


getLog = (callback) ->
  spawnCallStdout 'git', ['log', 'master', '-1', '--pretty=%B'], "git get log in gh-pages", callback

deploy = (callback) ->
  build () -> 
    runTests () -> 
      clone () ->
        fsextra.copyRecursive path_to_site, path_to_gh_pages, genericCallBack ->
          getLog (err, msg) ->
            if err then throw new Error("getLog failed "+err)
            console.log "job finished with err="+err+" and msg="+msg
            addAllGhPages ->
              commitGhPages msg, genericCallBack ->
                pushGhPages callback

gh_pages_info = (cmd, callback) ->
  spawnCall 'git', ['--git-dir='+path_to_gh_pages+'/.git', '--work-tree='+path_to_gh_pages, cmd], "git "+cmd+" on gh-pages", callback

getTestsResults = (callback) ->
  spawnCallStdout 'phantomjs', ['site/lib/phantom-jasmine/run_jasmine_test.coffee', 'site/tests/phantom.html'], "phantomjs/phantom-jasmine test", callback

runTests = (callback) ->
  getTestsResults (err, res) ->
    if err
      console.log "tests failed: err="+err+":\n"+res
    else
      callback()

task 'build', 'build once', ->
  build()
  console.log "task build finished"

task 'watch', 'continually build with --watch', ->
   spawnCall 'coffee', ['-cw', '-o', 'site', 'src'], "watch"

task 'doc', 'create documentation', ->
  spawnCall 'docco', ['src/*.coffee', 'src/tests/*.coffee'], "create doc"

task 'clone', 'clone gh-pages', ->
  clone()

task 'gh-pages-status', 'get status of gh-pages', ->
  gh_pages_info("status")

task 'gh-pages-diff', 'get diff of gh-pages', ->
  gh_pages_info("diff")

task 'deploy', 'deploy on gh-pages', ->
  deploy()

task 'safe-push', 'if tests succeed, push', ->



#add options like on Coffeescript page
###
task 'safe-push-deploy', 'if tests succeed, deploy and push on master', ->
  deploy () ->
    commitOnMaster () ->
      pushOnMaster 
###

task 'test', 'test GE', ->
  phantomjs = spawn 'phantomjs', ['site/lib/phantom-jasmine/run_jasmine_test.coffee', 'site/tests/phantom.html']
  phantomjs.stdout.on 'data', (data) -> console.log data.toString().trim()
  phantomjs.on "exit", (code) -> 
    console.log("exited with code #{code}")
    if code != 0 then throw new Error("Tests failed")
