{
  "action": "doInParallel",
  "children": [
    { 
      "send": {
        "services.graphics.shapes": "tools.drawShape({ type: 'image', asset: 'background', layer: 'bg', position: [0, 0] })" 
      }
    },
    {
      "action": "doInSequence",
      "params": {
        "in": {
          "activeChild": "model.topLevelActiveChild"
        },
        "out": {
          "model.topLevelActiveChild": "params.activeChild"
        }
      },
      "children": [
        {
          "action": "doForSomeTime",
          "params": {
            "in": {
              "time": "model.constants.startingTime",
              "timer": "model.timer"
            },
            "out": {
              "model.timer": "params.timer"
            }
          },
          "children": [
            { 
              "send": {
                "services.graphics.shapes": "tools.drawShape({ type: 'image', asset: 'title', layer: 'pieces', position: [100, 150] })" 
              }
            },
            {
              "send": {
                "services.graphics.shapes": "tools.drawShape({ type: 'text', text: 'Ready...', layer: 'text', position: [885, 150], strokeStyle: 'white', fillStyle: 'white', font: '16px Rix', align: 'center' })" 
              }
            },
            {
              "send": {
                "model.pieces": "model.constants.level.pieces",
                "model.boxedPieces": "model.constants.level.boxedPieces",
                "model.goalReached": false,
                "model.selectedPiece": "model.constants.level.selectedPiece"
              }
            }
          ]
        },
        {
          "action": "doWhile",
          "params": {
            "in": {
              "value": "!tools.reachedGoal(tools.makeLightPath(model.pieces, model.constants.boardGrid.gridSize, model.constants.mirrorAttenuationFactor, model.constants.minimumAttenuation).cells, model.pieces)"
            }
          },
          "children": [ 
            {
              "send": {
                "services.graphics.shapes": "tools.drawLightPath(model.constants.boardGrid, tools.makeLightPath(model.pieces, model.constants.boardGrid.gridSize, model.constants.mirrorAttenuationFactor, model.constants.minimumAttenuation).segments)"
              }
            },
            {
              "foreach": {
                "from": "model.pieces",
                "bindTo": "piece"
              },
              "children": [
                {
                  "send": {
                    "services.graphics.shapes": "tools.drawShape({ layer: 'pieces', type: 'image', asset: bindings.piece.type, position: [-50/2, -50/2], translation: tools.gridCellCenter(model.constants.boardGrid, [bindings.piece.col, bindings.piece.row]), rotation: bindings.piece.rotation })" 
                  }
                }
              ]
            },
            {
              "foreach": {
                "from": "model.boxedPieces",
                "bindTo": "piece",
                "index": "pieceIndex"
              },
              "children": [
                {
                  "send": {
                    "services.graphics.shapes": "tools.drawShape({ layer: 'pieces', type: 'image', asset: bindings.piece.type, position: [-50/2, -50/2], scale: 0.67, translation: tools.gridCellCenter(model.constants.boxGrid, tools.gridIndexToCell(bindings.pieceIndex)) })" 
                  }
                }
              ]
            },
            {
              "send": {
                "services.graphics.shapes": "tools.drawShape(_.extend(tools.gridCellRectangle(model.constants.boardGrid, [model.selectedPiece.col, model.selectedPiece.row]), { layer: 'selection', strokeStyle: 'yellow', lineWidth: 4 }))" 
              }
            },
            {
              "foreach": {
                "from": "model.pieces",
                "bindTo": "selectedPiece",
                "where": "model.selectedPiece && bindings.selectedPiece.col === model.selectedPiece.col && bindings.selectedPiece.row === model.selectedPiece.row && !_.contains(model.constants.unrotatablePieces, bindings.selectedPiece.type)"
              },
              "children": [
                {
                  "action": "changeParameterThroughKeyboard",
                  "params": {
                    "in": {
                      "parameter": "bindings.selectedPiece.rotation",
                      "keysDown": "services.keyboard.keysDown",
                      "keyMap": "model.constants.rotationKeyMap"
                    },
                    "out": {
                      "bindings.selectedPiece.rotation": "params.parameter"
                    }
                  }
                },
                {
                  "action": "reactToMouse",
                  "params": {
                    "in": {
                      "shapes": "[{ type: 'circle', radius: 0.8 * model.constants.boardGrid.cellSize[0], center: tools.gridCellCenter(model.constants.boardGrid, [model.selectedPiece.col, model.selectedPiece.row]), strokeStyle: 'white', lineWidth: 15 }]",
                      "shape": "model.selectedPieceDrag.shape",
                      "mousePosition": "services.mouse.position",
                      "mouseDown": "services.mouse.down",
                      "state": "model.selectedPieceDrag.state",
                      "dragStartPosition": "model.selectedPieceDrag.dragStartPosition"
                    },
                    "out": {
                      "model.selectedPieceDrag.state": "params.state",
                      "model.selectedPieceDrag.dragStartPosition": "params.dragStartPosition",
                      "model.selectedPieceDrag.shape": "params.shape"
                    }
                  }
                },
                {
                  "action": "when",
                  "params": {
                    "in": {
                      "value": "model.selectedPieceDrag.state"
                    }
                  },
                  "children": [
                    {
                      "name": "startDrag",
                      "send": {
                        "model.rotationOffset": "tools.calculateRotationOffset(bindings.selectedPiece.rotation, tools.gridCellCenter(model.constants.boardGrid, [model.selectedPiece.col, model.selectedPiece.row]), services.mouse.position)" 
                      }
                    },
                    {
                      "name": "drag",
                      "send": {
                        "bindings.selectedPiece.rotation": "tools.calculateRotation(model.rotationOffset, tools.gridCellCenter(model.constants.boardGrid, [model.selectedPiece.col, model.selectedPiece.row]), services.mouse.position)" 
                      }
                    }
                  ]
                }
              ]
            },
            {
              "action": "reactToMouse",
              "params": {
                "in": {
                  "shapes": "tools.makeMoveableShapes(model.constants.boardGrid, model.pieces, model.constants.boxGrid, model.boxedPieces, model.constants.unmovablePieces)",
                  "shape": "model.pieceDrag.shape",
                  "mousePosition": "services.mouse.position",
                  "mouseDown": "services.mouse.down",
                  "state": "model.pieceDrag.state",
                  "dragStartPosition": "model.pieceDrag.dragStartPosition"
                },
                "out": {
                  "model.pieceDrag.state": "params.state",
                  "model.pieceDrag.dragStartPosition": "params.dragStartPosition",
                  "model.pieceDrag.shape": "params.shape"
                }
              }
            },
            {
              "action": "when",
              "params": {
                "in": {
                  "value": "model.pieceDrag.state"
                }
              },
              "children": [
                {
                  "name": "startDrag",
                  "send": {
                    "model.draggedPiece": "model.pieceDrag.shape.id" 
                  }
                },
                {
                  "name": "endDrag",
                  "send": {
                    "model.draggedPiece": "null",
                    "model.pieces": "tools.movePieceTo(model.draggedPiece, tools.gridCellAtPoint(model.constants.boardGrid, services.mouse.position), model.pieces, model.boxedPieces, model.constants.boardGrid.gridSize, model.constants.unmovablePieces).pieces",
                    "model.boxedPieces": "tools.movePieceTo(model.draggedPiece, tools.gridCellAtPoint(model.constants.boardGrid, services.mouse.position), model.pieces, model.boxedPieces, model.constants.boardGrid.gridSize, model.constants.unmovablePieces).boxedPieces"
                  }
                },
                {
                  "name": "click",
                  "send": {
                    "model.selectedPiece": "{ col: model.pieceDrag.shape.id.col, row: model.pieceDrag.shape.id.row }"
                  }
                },
                {
                  "name": "hover",
                  "send": {
                    "services.mouse.cursor": "'pointer'"
                  }  
                }
              ]
            },
            {
              "action": "if",
              "params": {
                "in": {
                  "value": "model.selectedPiece"
                }
              },
              "children": [
                {
                  "send": {
                    "services.graphics.shapes": "tools.drawShape({ layer: 'rotating', type: 'image', asset: model.rotating ? 'is-rotating' : 'can-rotate', scale: 0.5, position: [-208/2, -208/2], translation: tools.gridCellCenter(model.constants.boardGrid, [model.selectedPiece.col, model.selectedPiece.row]) })" 
                  }
                }
              ]
            },
            {
              "action": "if",
              "params": {
                "in": {
                  "value": "model.draggedPiece"
                }
              },
              "children": [
                {
                  "send": {
                    "services.mouse.cursor": "'move'",
                    "services.graphics.shapes": "tools.drawShape({ type: 'image', layer: 'drag', asset: model.draggedPiece.type, alpha: 0.5, position: [-model.constants.pieceAssetCentering, -model.constants.pieceAssetCentering], translation: services.mouse.position, rotation: model.draggedPiece.rotation })"
                  }
                }
              ]
            }
          ]
        },
        {
          "action": "doForSomeTime",
          "params": {
            "in": {
              "time": "model.constants.endingTime",
              "timer": "model.timer"
            },
            "out": {
              "model.timer": "params.timer"
            }
          },
          "children": [
            {
              "send": {
                "services.graphics.shapes": "tools.drawShape({ type: 'text', text: 'You win', layer: 'text', position: [885, 150], strokeStyle: 'white', fillStyle: 'white', font: '18px Rix', align: 'center' })" 
              }
            },
            {
              "foreach": {
                "from": "model.pieces",
                "bindTo": "piece"
              },
              "children": [
                {
                  "send": {
                    "services.graphics.shapes": "tools.drawShape({ layer: 'pieces', type: 'image', asset: bindings.piece.type, position: [-50/2, -50/2], translation: tools.gridCellCenter(model.constants.boardGrid, [bindings.piece.col, bindings.piece.row]), rotation: bindings.piece.rotation })" 
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
