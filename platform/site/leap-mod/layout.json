{
  "action": "doInParallel",
  "children": [
    { 
      "send": {
        "services.graphics.shapes": "tools.drawShape({ type: 'rectangle', layer: 'bg', position: [0, 0], size: services.graphics.size, fillStyle: 'black' })"
      }
    },
    {
      "action": "doInSequence",
      "params": {
        "in": {
          "activeChild": "model.activeChild"
        },
        "out": {
          "model.activeChild": "params.activeChild"
        }
      },
      "children": [
        { 
          "send": {
            "model.blocks": "model.constants.initialBlocks",
            "model.neighbors": "model.constants.initialNeighbors",
            "model.gallery": "[]",
            "model.selectedGalleryIndexes": "[]",
            "model.events" : "[{ type: 'began game', time: tools.makeTimestamp(services.time) }]"
          }
        },
        { 
          "action": "doWhile",
          "params": {
            "in": {
              "value": "!model.ageForm.done"
            }
          },
          "children": [
            {
              "action": "updateHtmlTemplate",
              "params": {
                "in": {
                  "htmlService": "services.html",
                  "modelValues": "model.ageForm",
                  "assetName": "'form'",
                  "templateName": "'ageForm'"
                },
                "out": {
                  "services.html": "params.htmlService",
                  "model.ageForm": "params.modelValues"
                }
              }
            }
          ]
        },
        {
          "send": {
            "model.events" : "GE.appendToArray(model.events, { type: 'filled form', time: tools.makeTimestamp(services.time) })"
          }
        },
        {
          "action": "doWhile",
          "params": {
            "in": {
              "value": "!services.html.receive.blocksForm || !services.html.receive.blocksForm.values.done"
            }
          },
          "children": [
            {
              "action": "detectMouse",
              "params": {
                "in": {
                  "shapes": "tools.translateShapes(tools.inverseVector(model.gridTranslation), tools.makeNeighborBlockShapes(model.constants.grid, model.neighbors, tools.rgbColorString(model.constants.blockColor), model.constants.blockSize))",
                  "shape": "model.mouseDetection.shape",
                  "mousePosition": "services.mouse.position",
                  "mouseDown": "services.mouse.down",
                  "state": "model.mouseDetection.state",
                  "dragStartPosition": "model.mouseDetection.dragStartPosition"
                },
                "out": {
                  "model.mouseDetection.state": "params.state",
                  "model.mouseDetection.dragStartPosition": "params.dragStartPosition",
                  "model.mouseDetection.shape": "params.shape"
                }
              }
            },            
            { 
              "send": {
                "services.graphics.shapes": "tools.drawShapes(tools.translateShapes(tools.inverseVector(model.gridTranslation), tools.makeBlockShapes(model.constants.grid, GE.difference(model.blocks, model.highlightedBlocks), tools.rgbColorString(model.constants.blockColor), model.constants.blockSize)))"
              }
            },
            { 
              "send": {
                "services.graphics.shapes": "tools.drawShapes(tools.translateShapes(tools.inverseVector(model.gridTranslation), tools.makeBlockShapes(model.constants.grid, GE.difference(model.neighbors, model.highlightedBlocks), tools.rgbColorString(model.constants.neighborColor), model.constants.blockSize)))"
              }
            },
            
            {
              "send": {
                "services.graphics.shapes": "tools.drawShapes(tools.translateShapes(tools.inverseVector(model.gridTranslation), tools.makeBlockShapes(model.constants.grid, model.highlightedBlocks, tools.rgbColorString(model.constants.highlightedBlockColor), model.constants.blockSize)))"
              }
            },
            { 
              "send": {
                "services.graphics.shapes": "tools.drawShape({ layer: 'gallery', type: 'rectangle', position: model.constants.galleryGrid.upperLeft, size: tools.gridSizeInPixels(model.constants.galleryGrid), fillStyle: 'grey', strokeStyle: 'white' })"
              }
            },
            {
              "send": {
                "model.targetGridTranslation": "tools.subtractVectors(tools.meanOfCoordinates(tools.listBlockCenters(model.constants.grid, model.blocks)), tools.gridCenter(model.constants.grid))"
              }
            },
            {
              "action": "if",
              "params": {
                "in": {
                  "value": "model.targetGridTranslation && tools.distanceBetweenPoints(model.gridTranslation, model.targetGridTranslation) > model.constants.minGridTranslation"
                }
              },
              "children": [
                {
                  "send": {
                    "model.gridTranslation": "tools.interpolateVector(model.gridTranslation, model.targetGridTranslation, 0.5)"
                  }
                }
              ]
            },
            {
              "action": "when",
              "params": {
                "in": {
                  "value": "model.mouseDetection.state"
                }
              },
              "children": [          
                {
                  "name": "click",
                  "send": {
                    "model.blocks": "tools.updateBlocks(model.mouseDetection.shape.meta, model.blocks, model.neighbors)",
                    "model.neighbors": "tools.updateNeighbors(model.mouseDetection.shape.meta, model.blocks, model.neighbors)",
                    "model.blocksLeft": "model.blocksLeft - 1",
                    "model.events" : "GE.appendToArray(model.events, { type: 'added tile', time: tools.makeTimestamp(services.time), shape: model.mouseDetection.shape.meta})"
                  }
                },
                {
                  "name": "hover",
                  "send": {
                    "services.mouse.cursor": "'pointer'"
                  }  
                }
              ]
            },
            {
              "send": { 
                "services.html.send.blocksForm": "{ asset: 'blocksForm', values: { done: false, blocksLeftCount: model.blocksLeft, shape_ready: (model.blocksLeft == 0)} }"
              }
            },
            {
              "action": "if",
              "params": {
                "in": {
                  "value": "model.blockGroupsToBeHighlighted.length > 0"
                }
              },
              "children": [
                {
                  "send": {
                    "model.highlightedBlocks": "_.first(model.blockGroupsToBeHighlighted)",
                    "model.blockGroupsToBeHighlighted": "_.rest(model.blockGroupsToBeHighlighted)"
                  }
                },
                {
                  "send": {
                    "model.highlightedBlocks": "[]"
                  }
                }
              ]
            },
            { 
              "action": "if",
              "params": {
                "in": {
                  "value": "services.html.receive.blocksForm && services.html.receive.blocksForm.values.startAgain"
                }
              },
              "children": [
                {
                  "send": {
                    "model.blocks": "model.constants.initialBlocks",
                    "model.neighbors": "model.constants.initialNeighbors",
                    "model.blocksLeft": "9",                    
                    "model.events" : "GE.appendToArray(model.events, { type: 'started again', time: tools.makeTimestamp(services.time)})"
                  }
                }
              ]
            },
            { 
              "action": "if",
              "params": {
                "in": {
                  "value": "services.html.receive.blocksForm && services.html.receive.blocksForm.values.addShape"
                }
              },
              "children": [
                {
                  "send": {
                    "model.blocks": "model.constants.initialBlocks",
                    "model.neighbors": "model.constants.initialNeighbors",
                    "model.blocksLeft": "9",           
                    "model.gallery" : "GE.appendToArray(model.gallery, model.blocks)",                    
                    "model.events" : "GE.appendToArray(model.events, { type: 'added shape to gallery', time: tools.makeTimestamp(services.time)})"
                  }
                }
              ]
            },
            {
              "action": "if",
              "params": {
                "in": {
                  "value": "model.gallery.length > 0"
                }
              },
              "children": [
                { 
                  "send": {
                    "services.graphics.shapes": "tools.drawShapes(tools.translateShapes(tools.inverseVector(tools.findCenterOfCells(model.constants.galleryGrid, _.last(model.gallery))), tools.makeBlockShapes(model.constants.galleryGrid, _.last(model.gallery), tools.rgbColorString(model.constants.blockColor), model.constants.galleryBlockSize)))"
                  }
                }
              ]
            }
          ]
        },
        {
          "send": {
            "model.selectionGrids": "tools.makeSelectionGalleryGrids(model.constants.selectionGrid, model.constants.galleryGrid, model.gallery)",
            "model.events" : "GE.appendToArray(model.events, { type: 'began gallery selection', time: tools.makeTimestamp(services.time) })"
          }
        },
        {
          "action": "doWhile",
          "params": {
            "in": {
              "value": "(!services.html.receive.selectionForm || !services.html.receive.selectionForm.values.done) && (model.gallery.length > 0)"
            }
          },
          "children": [
            {
              "foreach": {
                "from": "model.selectionGrids",
                "bindTo": "selectionGrid",
                "index": "selectionGridIndex"
              },
              "children": [
                {
                  "send": {
                    "services.graphics.shapes": "tools.drawShapes(tools.makeSelectionGalleryShapes(model.selectionGrids, model.selectedGalleryIndexes))"
                  }
                },
                { 
                  "send": {
                    "services.graphics.shapes": "tools.drawShapes(tools.translateShapes(tools.inverseVector(tools.findCenterOfCells(bindings.selectionGrid, model.gallery[bindings.selectionGridIndex])), tools.makeBlockShapes(bindings.selectionGrid, model.gallery[bindings.selectionGridIndex], tools.rgbColorString(model.constants.blockColor), model.constants.galleryBlockSize)))"
                  }
                }
              ]
            },
            {
              "action": "detectMouse",
              "params": {
                "in": {
                  "shapes": "_.map(model.selectionGrids, tools.makeGridCoveringRectangle, tools)",
                  "shape": "model.mouseDetection.shape",
                  "mousePosition": "services.mouse.position",
                  "mouseDown": "services.mouse.down",
                  "state": "model.mouseDetection.state",
                  "dragStartPosition": "model.mouseDetection.dragStartPosition"
                },
                "out": {
                  "model.mouseDetection.state": "params.state",
                  "model.mouseDetection.dragStartPosition": "params.dragStartPosition",
                  "model.mouseDetection.shape": "params.shape"
                }
              }
            },
            {
              "action": "when",
              "params": {
                "in": {
                  "value": "model.mouseDetection.state"
                }
              },
              "children": [
                {
                  "name": "hover",
                  "send": {
                    "services.mouse.cursor": "'pointer'"
                  }  
                },
                {
                  "name": "click",
                  "send": {
                    "model.selectedGalleryIndexes": "GE.toggleValueInArray(model.selectedGalleryIndexes, model.mouseDetection.shape.meta)",
                    "model.events" : "GE.appendToArray(model.events, { type: 'selected shape', time: tools.makeTimestamp(services.time), shape: tools.serializeBlocks(model.gallery[model.mouseDetection.shape.meta]) })"
                  }
                }
              ]
            },
            {
              "send": { 
                "services.html.send.selectionForm": "{ asset: 'selectionForm', values: { done: false, ready: model.selectedGalleryIndexes.length >= 1 } }"
              }
            }
          ]
        },
        {
          "send": { 
            "model.events" : "GE.appendToArray(model.events, { type: 'completed selection', time: tools.makeTimestamp(services.time) })"
          }
        },
        {
          "send": { 
            "services.http.requests.playerTracking" : "{ url: 'http://localhost/', data: tools.makeTrackingString({ age: model.ageForm.age, gender: model.ageForm.gender}, model.events), method: 'POST', contentType: 'application/json; charset=UTF-8',  }"
          }
        },
        {
          "action": "doWhile",
          "params": {
            "in": {
              "value": "!services.html.receive.thanksForm || !services.html.receive.thanksForm.values.done"
            }
          },
          "children": [
            {
              "send": { 
                "services.html.send.thanksForm": "{ asset: 'thanksForm', values: { done: false } }"
              }
            }
          ]
        }
      ]
    }
  ]
}
