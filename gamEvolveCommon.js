// Generated by CoffeeScript 1.6.3
(function() {
  var GE, globals,
    __slice = [].slice;

  globals = this;

  GE = {};

  globals.GE = GE;

  GE.makeConstantSet = function() {
    var obj, value, values, _i, _len;
    values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    obj = {
      contains: function(value) {
        return value in obj;
      }
    };
    for (_i = 0, _len = values.length; _i < _len; _i++) {
      value = values[_i];
      obj[value] = value;
    }
    return Object.freeze(obj);
  };

  GE.logLevels = GE.makeConstantSet("ERROR", "WARN", "INFO", "LOG");

  GE.signals = GE.makeConstantSet("DONE", "ERROR");

  GE.indexOf = function(collection, value) {
    var k, v;
    for (k in collection) {
      v = collection[k];
      if (_.isEqual(v, value)) {
        return k;
      }
    }
    return -1;
  };

  GE.contains = function(collection, value) {
    return GE.indexOf(collection, value) !== -1;
  };

  GE.uniq = function(array) {
    var results, seen;
    results = [];
    seen = [];
    _.each(array, function(value, index) {
      if (!GE.contains(seen, value)) {
        seen.push(value);
        return results.push(array[index]);
      }
    });
    return results;
  };

  GE.cloneData = function(o) {
    return JSON.parse(JSON.stringify(o));
  };

  GE.concatenate = function() {
    var rest;
    rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return _.flatten(rest, true);
  };

  GE.appendToArray = function(array, value) {
    return GE.concatenate(array, [value]);
  };

  GE.removeFromArray = function(array, value) {
    var element;
    return (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        element = array[_i];
        if (!_.isEqual(value, element)) {
          _results.push(element);
        }
      }
      return _results;
    })();
  };

  GE.toggleValueInArray = function(array, value) {
    if (GE.contains(array, value)) {
      return GE.removeFromArray(array, value);
    } else {
      return GE.appendToArray(array, value);
    }
  };

  GE.intersection = function(array) {
    var rest;
    rest = Array.prototype.slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return GE.indexOf(other, item) >= 0;
      });
    });
  };

  GE.difference = function(array) {
    var rest;
    rest = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
    return _.filter(array, function(value) {
      return !GE.contains(rest, value);
    });
  };

  GE.roundOffDigits = function(n, d) {
    var m;
    m = Math.pow(10, d);
    return Math.round(n * m) / m;
  };

}).call(this);
