{
  "name": "particle",
  "fileVersion": 0.2,
  "processors": {
    "changeParameterThroughKeyboard": {
      "pinDefs": {
        "parameter": {
          "direction": "inout"
        },
        "keysDown": null,
        "keyMap": null
      },
      "update": "for (var keyCode in pins.keyMap) {\n  if (pins.keysDown[keyCode]) {\n    var value = pins.keyMap[keyCode];\n    if (_.isString(value) && value.length > 0 && (value[0] == '+' || value[0] == '-')) {\n      pins.parameter += Number(value);\n    } else {\n      pins.parameter = value;\n    }\n    break;\n  }\n}"
    },
    "doForSomeTime": {
      "pinDefs": {
        "time": null,
        "timer": {
          "direction": "inout"
        }
      },
      "update": "if (pins.timer++ >= pins.time) {\n  pins.timer = 0;\n  return GE.signals.DONE;\n}"
    },
    "doWhile": {
      "pinDefs": {
        "value": null
      },
      "update": "if (!pins.value)\n  return GE.signals.DONE;"
    },
    "detectMouse": {
      "pinDefs": {
        "shapes": null,
        "shape": {
          "direction": "inout"
        },
        "mousePosition": null,
        "mouseDown": null,
        "state": {
          "direction": "inout"
        },
        "dragStartPosition": {
          "direction": "inout"
        },
        "minimumDragDistance": {
          "default": "5"
        }
      },
      "update": "if (!pins.state)\n  pins.state = 'none';\nswitch (pins.state) {\ncase 'none':\n  if (pins.mousePosition) {\n    for (var i in pins.shapes) {\n      if (transformers.pointIntersectsShape(pins.mousePosition, pins.shapes[i])) {\n        log(GE.logLevels.INFO, 'Entering hover mode. Old state = ' + pins.state);\n        pins.state = 'hover';\n        pins.shape = pins.shapes[i];\n        break;\n      }\n    }\n  }\n  break;\ncase 'hover':\n  if (!pins.mousePosition || !transformers.pointIntersectsShape(pins.mousePosition, pins.shape)) {\n    pins.state = 'none';\n    pins.shape = null;\n    log(GE.logLevels.INFO, 'Leaving hover mode');\n  } else if (pins.mouseDown) {\n    pins.dragStartPosition = pins.mousePosition;\n    pins.state = 'pressed';\n    log(GE.logLevels.INFO, 'Entering presed mode');\n  }\n  break;\ncase 'pressed':\n  if (!pins.mouseDown) {\n    pins.state = 'click';\n    pins.dragStartPosition = null;\n    log(GE.logLevels.INFO, 'Leaving pressed mode');\n  } else if (Vector.create(pins.dragStartPosition).distanceFrom(Vector.create(pins.mousePosition)) >= pins.minimumDragDistance) {\n    pins.state = 'startDrag';\n    pins.dragStartPosition = null;\n    log(GE.logLevels.INFO, 'Entering drag mode');\n  }\n  break;\ncase 'click':\n  pins.state = 'hover';\n  break;\ncase 'startDrag':\n  pins.state = 'drag';\n  break;\ncase 'drag':\n  if (!pins.mouseDown) {\n    pins.state = 'endDrag';\n    pins.dragStartPosition = null;\n    log(GE.logLevels.INFO, 'Leaving drag mode');\n  }\n  break;\ncase 'endDrag':\n  pins.state = 'hover';\n  break;\ndefault:\n  throw new Error('Unknown state \\'' + pins.state + '\\'');\n}"
    },
    "updateHtmlTemplate": {
      "pinDefs": {
        "htmlService": {
          "direction": "inout"
        },
        "modelValues": {
          "direction": "inout"
        },
        "assetName": null,
        "templateName": null
      },
      "update": "if (!pins.htmlService.receive[pins.templateName]) {\n  pins.htmlService.send[pins.templateName] = {\n    asset: pins.assetName,\n    values: pins.modelValues\n  };\n} else {\n  pins.modelValues = pins.htmlService.receive[pins.templateName].values;\n  pins.htmlService.send[pins.templateName] = pins.htmlService.receive[pins.templateName];\n}"
    }
  },
  "switches": {
    "doInParallel": {
      "doc": "Just to place children under it"
    },
    "doInSequence": {
      "pinDefs": {
        "activeChild": {
          "direction": "inout",
          "default": 0
        }
      },
      "listActiveChildren": "return [pins.activeChild];",
      "handleSignals": "if (signals[pins.activeChild] == GE.signals.DONE)\n  pins.activeChild++;\nif (pins.activeChild > children.length - 1) {\n  pins.activeChild = 0;\n  return GE.signals.DONE;\n}"
    },
    "when": {
      "pinDefs": {
        "value": null
      },
      "listActiveChildren": "return transformers.childByName(children, pins.value);"
    },
    "if": {
      "pinDefs": {
        "value": null
      },
      "listActiveChildren": "return pins.value ? [0] : children.length > 1 ? [1] : [];"
    },
    "sandwich": {
      "pinDefs": {
        "condition": null,
        "started": {
          "direction": "inout"
        }
      },
      "listActiveChildren": "if (!pins.track) {\n  if (!pins.condition) {\n    return [0];\n  } else {\n    pins.track = true;\n    return [1];\n  }\n} else {\n  if (pins.condition) {\n    return [1];\n  } else {\n    pins.track = false;\n    return [2];\n  }\n}"
    },
    "doPeriodically": {
      "pinDefs": {
        "currentTime": null,
        "lastTime": {
          "direction": "inout"
        },
        "period": null
      },
      "listActiveChildren": "return pins.currentTime >= pins.lastTime + pins.period ? children : [];",
      "handleSignals": "if (activeChildren.length > 0) {\n  pins.lastTime = pins.currentTime;\n}"
    }
  },
  "transformers": {
    "drawShape": {
      "args": [
        "shape",
        "oldShapes"
      ],
      "body": "var shapes = oldShapes || {};\nshapes[_.uniqueId()] = shape;\nreturn shapes;"
    },
    "pointIntersectsShape": {
      "args": [
        "point",
        "shape"
      ],
      "body": "if (!shape.fillStyle && !shape.strokeStyle)\n  return false;\nswitch (shape.type) {\ncase 'circle':\n  var center = Vector.create(shape.center);\n  if (shape.translation)\n    center = center.add(shape.translation);\n  var lineWidth = shape.lineWidth || 1;\n  var scale = shape.scale || 1;\n  var minDistance = shape.fillStyle ? 0 : shape.radius - lineWidth;\n  var maxDistance = shape.strokeStyle ? shape.radius + lineWidth : shape.radius;\n  var distance = center.distanceFrom(Vector.create(point));\n  return distance >= minDistance * scale && distance <= maxDistance * scale;\ncase 'rectangle':\n  var pointInShapeFrame = Vector.create(point);\n  if (shape.translation)\n    pointInShapeFrame = pointInShapeFrame.subtract(shape.translation);\n  return pointInShapeFrame.elements[0] >= shape.position[0] && pointInShapeFrame.elements[0] <= shape.position[0] + shape.size[0] && pointInShapeFrame.elements[1] >= shape.position[1] && pointInShapeFrame.elements[1] <= shape.position[1] + shape.size[1];\ndefault:\n  throw new Error('Shape type \\'' + shape.type + '\\' is not supported');\n}"
    },
    "removeElement": {
      "args": [
        "tab",
        "index"
      ],
      "body": "var newArray = [];\nfor (var i = 0; i < tab.length; i++) {\n  if (i != index)\n    newArray.push(tab[i]);\n}\nreturn newArray;"
    },
    "gridCellAtPoint": {
      "args": [
        "grid",
        "point"
      ],
      "body": "if (point === null)\n  return null;\nvar gridPos = [\n    Math.floor((point[0] - grid.upperLeft[0]) / grid.cellSize[0]),\n    Math.floor((point[1] - grid.upperLeft[1]) / grid.cellSize[1])\n  ];\nif (grid.type != 'infinite' && (gridPos[0] < 0 || gridPos[0] > grid.gridSize[0] || gridPos[1] < 0 || gridPos[1] > grid.gridSize[1]))\n  return null;\nelse\n  return gridPos;"
    },
    "gridCellToPoint": {
      "args": [
        "grid",
        "cell",
        "proportions"
      ],
      "body": "return [\n  (cell[0] + proportions[0]) * grid.cellSize[0] + grid.upperLeft[0],\n  (cell[1] + proportions[1]) * grid.cellSize[1] + grid.upperLeft[1]\n];"
    },
    "gridCellUpperLeft": {
      "args": [
        "grid",
        "cell"
      ],
      "body": "return transformers.gridCellToPoint(grid, cell, [\n  0,\n  0\n]);"
    },
    "gridCellCenter": {
      "args": [
        "grid",
        "cell"
      ],
      "body": "return transformers.gridCellToPoint(grid, cell, [\n  0.5,\n  0.5\n]);"
    },
    "gridCellRectangle": {
      "args": [
        "grid",
        "cell",
        "meta"
      ],
      "body": "return {\n  type: 'rectangle',\n  position: transformers.gridCellUpperLeft(grid, cell),\n  size: grid.cellSize,\n  meta: meta\n};"
    },
    "gridSizeInPixels": {
      "args": [
        "grid"
      ],
      "body": "return [\n  grid.cellSize[0] * grid.gridSize[0],\n  grid.cellSize[1] * grid.gridSize[1]\n];"
    },
    "gridIndexToCell": {
      "args": [
        "grid",
        "index"
      ],
      "body": "return [\n  index % grid.gridSize[0],\n  Math.floor(index / grid.gridSize[0])\n];"
    },
    "calculateRotationAngle": {
      "args": [
        "center",
        "mousePosition"
      ],
      "body": "var h = [\n    mousePosition[0] - center[0],\n    mousePosition[1] - center[1]\n  ];\nvar omDistance = Math.sqrt(h[0] * h[0] + h[1] * h[1]);\nvar ratio = -h[1] / omDistance;\nvar angle = 0;\nif (omDistance !== 0) {\n  var absValueAngle = Math.acos(ratio) * 180 / Math.PI;\n  if (h[0] <= 0) {\n    angle = -absValueAngle;\n  } else {\n    angle = absValueAngle;\n  }\n}\nreturn angle;"
    },
    "calculateRotationOffset": {
      "args": [
        "rotation",
        "center",
        "mousePosition"
      ],
      "body": "return rotation - transformers.calculateRotationAngle(center, mousePosition);"
    },
    "calculateRotation": {
      "args": [
        "rotationOffset",
        "center",
        "mousePosition"
      ],
      "body": "return transformers.calculateRotationAngle(center, mousePosition) + rotationOffset;"
    },
    "childByName": {
      "args": [
        "children",
        "value"
      ],
      "body": "var childIndex = GE.indexOf(children, value);\nreturn childIndex != -1 ? [childIndex] : [];"
    },
    "makeFilledRectangle": {
      "args": [
        "grid",
        "cell",
        "meta"
      ],
      "body": "return _.extend(transformers.gridCellRectangle(grid, cell, meta), {\n  strokeStyle: 'white',\n  fillStyle: 'white'\n});"
    },
    "makeGridCoveringRectangle": {
      "args": [
        "grid",
        "meta"
      ],
      "body": "return {\n  meta: meta,\n  type: 'rectangle',\n  position: grid.upperLeft,\n  size: transformers.gridSizeInPixels(grid),\n  strokeStyle: 'white',\n  fillStyle: 'white'\n};"
    },
    "meanOfCoordinates": {
      "args": [
        "coordinates"
      ],
      "body": "var sum = _.reduce(coordinates, function (memo, cell) {\n    return [\n      memo[0] + cell[0],\n      memo[1] + cell[1]\n    ];\n  }, [\n    0,\n    0\n  ]);\nreturn [\n  sum[0] / coordinates.length,\n  sum[1] / coordinates.length\n];"
    },
    "findCenterOfCells": {
      "args": [
        "grid",
        "cells"
      ],
      "body": "if (cells.length == 0)\n  return [\n    0,\n    0\n  ];\nvar gridCenter = transformers.gridCenter(grid);\nvar sum = _.reduce(cells, function (memo, cell) {\n    return [\n      memo[0] + cell[0] + 0.5,\n      memo[1] + cell[1] + 0.5\n    ];\n  }, [\n    0,\n    0\n  ]);\nreturn [\n  sum[0] * grid.cellSize[0] / cells.length - gridCenter[0],\n  sum[1] * grid.cellSize[1] / cells.length - gridCenter[1]\n];"
    },
    "listBlockCenters": {
      "args": [
        "grid",
        "blocks"
      ],
      "body": "return _.map(blocks, function (block) {\n  return [\n    (block[0] + 0.5) * grid.cellSize[0],\n    (block[1] + 0.5) * grid.cellSize[1]\n  ];\n});"
    },
    "gridCenter": {
      "args": [
        "grid"
      ],
      "body": "return [\n  grid.cellSize[0] * grid.gridSize[0] / 2,\n  grid.cellSize[1] * grid.gridSize[1] / 2\n];"
    },
    "makeBlockShapes": {
      "args": [
        "grid",
        "blocks",
        "blockColor",
        "blockSize"
      ],
      "body": "var that = transformers;\nreturn _.map(blocks, function (block) {\n  return _.extend(that.gridCellRectangle(grid, block, block), {\n    layer: 'blocks',\n    fillStyle: blockColor,\n    size: blockSize\n  });\n});"
    },
    "makeMovableBlockShapes": {
      "args": [
        "grid",
        "blocks",
        "blockColor",
        "blockSize"
      ],
      "body": "var that = transformers;\nvar movableBlocks = _.filter(blocks, function (block) {\n    return that.canMoveBlock(blocks, block);\n  });\nreturn _.map(movableBlocks, function (block) {\n  return _.extend(that.gridCellRectangle(grid, block, block), {\n    layer: 'blocks',\n    fillStyle: blockColor,\n    size: blockSize\n  });\n});"
    },
    "makeDraggedShape": {
      "args": [
        "size",
        "color",
        "mousePosition"
      ],
      "body": "return {\n  layer: 'drag',\n  type: 'rectangle',\n  position: [\n    mousePosition[0] - size[0] / 2,\n    mousePosition[1] - size[1] / 2\n  ],\n  size: size,\n  fillStyle: color\n};"
    },
    "drawShapes": {
      "args": [
        "shapes"
      ],
      "body": "var that = transformers;\nreturn _.reduce(shapes, function (memo, shape) {\n  return that.drawShape(shape, memo);\n}, {});"
    },
    "blocksAreNeighbors": {
      "args": [
        "a",
        "b"
      ],
      "body": "var diff = [\n    Math.abs(a[0] - b[0]),\n    Math.abs(a[1] - b[1])\n  ];\nreturn diff[0] == 1 && diff[1] == 0 || diff[0] == 0 && diff[1] == 1;"
    },
    "makeAdjacencyList": {
      "args": [
        "blocks"
      ],
      "body": "var adjList = _.map(blocks, function () {\n    return [];\n  });\nfor (var i = 0; i < blocks.length - 1; i++) {\n  for (var j = i + 1; j < blocks.length; j++) {\n    if (transformers.blocksAreNeighbors(blocks[i], blocks[j])) {\n      adjList[i].push(j);\n      adjList[j].push(i);\n    }\n  }\n}\nreturn adjList;"
    },
    "visitBlocks": {
      "args": [
        "adjList",
        "startingIndices"
      ],
      "body": "var visited = [startingIndices];\nwhile (true) {\n  var toVisit = _.reduce(visited[visited.length - 1], function (memo, visitingIndex) {\n      return memo.concat(adjList[visitingIndex]);\n    }, []);\n  toVisit = _.uniq(toVisit);\n  toVisit = _.difference.apply(_, [toVisit].concat(visited));\n  if (toVisit.length > 0) {\n    visited.push(toVisit);\n  } else {\n    return visited;\n  }\n}"
    },
    "canMoveBlock": {
      "args": [
        "blocks",
        "block"
      ],
      "body": "var blocksWithout = transformers.removeElement(blocks, GE.indexOf(blocks, block));\nvar adjList = transformers.makeAdjacencyList(blocksWithout);\nvar visited = transformers.visitBlocks(adjList, [0]);\nreturn _.flatten(visited).length == blocksWithout.length;"
    },
    "findFreeBlockPositions": {
      "args": [
        "blocks"
      ],
      "body": "var freePositions = [];\n_.each(blocks, function (block) {\n  freePositions.push([\n    block[0] + 1,\n    block[1]\n  ]);\n  freePositions.push([\n    block[0] - 1,\n    block[1]\n  ]);\n  freePositions.push([\n    block[0],\n    block[1] + 1\n  ]);\n  freePositions.push([\n    block[0],\n    block[1] - 1\n  ]);\n});\nfreePositions = GE.uniq(freePositions);\nreturn GE.difference(freePositions, blocks);"
    },
    "distanceBetweenPoints": {
      "args": [
        "a",
        "b"
      ],
      "body": "return Vector.create(a).distanceFrom(Vector.create(b));"
    },
    "translateShapes": {
      "args": [
        "translation",
        "shapes"
      ],
      "body": "var newShapes = _.map(shapes, function (shape) {\n    return _.extend(shape, {\n      position: [\n        shape.position[0] + translation[0],\n        shape.position[1] + translation[1]\n      ]\n    });\n  });\nreturn newShapes;"
    },
    "translatePoint": {
      "args": [
        "translation",
        "point"
      ],
      "body": "return [\n  point[0] + translation[0],\n  point[1] + translation[1]\n];"
    },
    "inverseVector": {
      "args": [
        "vector"
      ],
      "body": "return [\n  -vector[0],\n  -vector[1]\n];"
    },
    "subtractVectors": {
      "args": [
        "a",
        "b"
      ],
      "body": "return [\n  a[0] - b[0],\n  a[1] - b[1]\n];"
    },
    "makeSelectionGalleryGrids": {
      "args": [
        "selectionGrid",
        "galleryGrid",
        "gallery"
      ],
      "body": "var that = transformers;\nreturn _.map(_.range(gallery.length), function (index) {\n  var cell = that.gridIndexToCell(selectionGrid, index);\n  return {\n    type: 'infinite',\n    'upperLeft': that.gridCellUpperLeft(selectionGrid, cell),\n    'cellSize': galleryGrid.cellSize,\n    'gridSize': galleryGrid.gridSize\n  };\n});"
    },
    "makeSelectionGalleryShapes": {
      "args": [
        "selectionGrids",
        "selectedGalleryIndexes"
      ],
      "body": "var that = transformers;\nreturn _.map(selectionGrids, function (selectionGrid, index) {\n  return _.extend(that.makeGridCoveringRectangle(selectionGrid, index), {\n    fillStyle: GE.contains(selectedGalleryIndexes, index) ? 'red' : 'grey',\n    strokeStyle: 'white',\n    layer: 'gallery'\n  });\n});"
    },
    "serializeBlocks": {
      "args": [
        "blocks"
      ],
      "body": "var min = _.reduce(blocks, function (memo, block) {\n    return [\n      Math.min(memo[0], block[0]),\n      Math.min(memo[1], block[1])\n    ];\n  }, [\n    Infinity,\n    Infinity\n  ]);\nvar rowNumbers = _.map(_.range(10), function () {\n    return 0;\n  });\n_.each(blocks, function (block) {\n  var index = block[1] - min[1];\n  rowNumbers[index] = rowNumbers[index] | 1 << 9 - (block[0] - min[0]);\n});\nreturn rowNumbers;"
    },
    "makeTimestamp": {
      "args": [
        "ms"
      ],
      "body": "return new Date(ms).toUTCString();"
    },
    "findDroppedPosition": {
      "args": [
        "grid",
        "blocks",
        "mousePosition"
      ],
      "body": "var that = transformers;\nvar hoveredCell = transformers.gridCellAtPoint(grid, mousePosition);\nif (!hoveredCell)\n  return blocks;\nvar freeBlockPositions = transformers.findFreeBlockPositions(blocks);\nreturn _.min(freeBlockPositions, function (block) {\n  return that.distanceBetweenPoints(hoveredCell, block);\n});"
    },
    "makeBlockGroupsToBeHighlighted": {
      "args": [
        "blocks",
        "newPosition"
      ],
      "body": "log(GE.logLevels.INFO, 'makeBlockGroupsToBeHighlighted', arguments);\nvar newBlocks = GE.appendToArray(blocks, newPosition);\nvar adjList = transformers.makeAdjacencyList(newBlocks);\nvar visitedBlockIndexes = _.rest(transformers.visitBlocks(adjList, [newBlocks.length - 1]));\nreturn _.map(visitedBlockIndexes, function (blockIndexes) {\n  return _.map(blockIndexes, function (index) {\n    return newBlocks[index];\n  });\n});"
    },
    "adjustShapesByMeta": {
      "args": [
        "shapes",
        "meta",
        "properties"
      ],
      "body": "return _.map(shapes, function (shape) {\n  if (_.isEqual(shape.meta, meta)) {\n    return _.extend(GE.clone(shape), properties);\n  } else {\n    return shape;\n  }\n});"
    },
    "interpolateVector": {
      "args": [
        "start",
        "end",
        "fraction"
      ],
      "body": "return _.map(_.zip(start, end), function (pair) {\n  return pair[0] + fraction * (pair[1] - pair[0]);\n});"
    },
    "cyclicInterpolate": {
      "args": [
        "start",
        "end",
        "fraction"
      ],
      "body": "return fraction < 0.5 ? transformers.interpolateVector(start, end, fraction / 0.5) : transformers.interpolateVector(end, start, (fraction - 0.5) / 0.5);"
    },
    "rgbColorString": {
      "args": [
        "colorArray"
      ],
      "body": "var flooredArray = _.map(colorArray, function (value) {\n    return Math.floor(value);\n  });\nreturn 'rgb(' + flooredArray.join(', ') + ')';"
    },
    "makeTrackingString": {
      "args": [
        "player",
        "events"
      ],
      "body": "return JSON.stringify({\n  player: player,\n  events: events\n});"
    },
    "generateChartData": {
      "args": [
        "userValue",
        "networkValues",
        "timeValue"
      ],
      "body": "return {\n  'labels': _.range(10),\n  'datasets': [\n    {\n      'fillColor': 'rgba(220,220,220,0.5)',\n      'strokeColor': 'rgba(220,220,220,1)',\n      'pointColor': 'rgba(220,220,220,1)',\n      'pointStrokeColor': '#fff',\n      'data': _.map(_.range(10), function (a) {\n        return 50 + 25 * Math.sin(timeValue / 2000 * a);\n      })\n    },\n    {\n      'fillColor': 'rgba(199, 96, 76, 0.5)',\n      'strokeColor': 'rgba(199, 96, 76, 1)',\n      'pointColor': 'rgba(199, 96, 76, 1)',\n      'pointStrokeColor': '#fff',\n      'data': networkValues\n    },\n    {\n      'fillColor': 'rgba(151,187,205,0.7)',\n      'strokeColor': 'rgba(151,187,205,1)',\n      'pointColor': 'rgba(151,187,205,1)',\n      'pointStrokeColor': '#fff',\n      'data': _.map(_.range(10), function (a) {\n        return 50 + 25 * Math.sin(userValue * a);\n      })\n    }\n  ]\n};"
    },
    "makeRandomNumberRequest": {
      "args": [
        "min",
        "max",
        "count"
      ],
      "body": "return {\n  url: 'http://www.random.org/integers/',\n  data: {\n    num: count,\n    min: min,\n    max: max,\n    base: 10,\n    format: 'plain',\n    rnd: 'new',\n    col: 1\n  },\n  cache: false\n};"
    },
    "obtainRandomNumbers": {
      "args": [
        "response"
      ],
      "body": "if (typeof response.error !== 'undefined') {\n  return _.range(10);\n} else {\n  return response.data.split('\\n');\n}"
    }
  },
  "assets": {
    "controls": "data:text/html;base64,PGlucHV0IHR5cGU9InJhbmdlIiBpZD0ic2xpZGVyIiBtaW49IjAiIG1heD0iMTAiIHN0ZXA9IjAuMSIgZGF0YS12YWx1ZT0iZGF0YS51c2VyVmFsdWUiIC8+",
    "controlsCss": "data:text/css;base64,I2dhbWVDb250ZW50IGlucHV0IHsKCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCXdpZHRoOiAzMDBweDsKCXRvcDogMjVweDsKCWxlZnQ6IDMzMHB4Owp9Cg=="
  },
  "circuits": {
    "main": {
      "memory": {
        "userValue": "5",
        "networkValues": [
          65,
          59,
          90,
          81,
          56,
          55,
          40,
          20,
          68,
          82
        ],
        "lastNetworkRequestTime": 0,
        "constants": {
          "chart": {
            "position": [
              0,
              40
            ],
            "size": [
              960,
              500
            ]
          },
          "networkRequestPeriod": 5000
        }
      },
      "board": {
        "children": [
          {
            "emitter": {
              "io.charts.test": "{ type: 'line', position: memory.constants.chart.position, size: memory.constants.chart.size, data: transformers.generateChartData(memory.userValue, memory.networkValues, io.time) }"
            }
          },
          {
            "pins": {
              "in": {
                "htmlService": "io.html",
                "memoryValues": "{ userValue: memory.userValue }",
                "assetName": "'controls'",
                "templateName": "'controls'"
              },
              "out": {
                "io.html": "pins.htmlService",
                "memory.userValue": "pins.memoryValues.userValue"
              }
            },
            "processor": "updateHtmlTemplate"
          },
          {
            "pins": {
              "in": {
                "currentTime": "io.time",
                "lastTime": "memory.lastNetworkRequestTime",
                "period": "memory.constants.networkRequestPeriod"
              },
              "out": {
                "memory.lastNetworkRequestTime": "pins.lastTime"
              }
            },
            "children": [
              {
                "emitter": {
                  "io.http.requests.random": "transformers.makeRandomNumberRequest(20, 90, 10)"
                }
              }
            ],
            "switch": "doPeriodically"
          },
          {
            "pins": {
              "in": {
                "value": "io.http.responses && io.http.responses.random"
              }
            },
            "children": [
              {
                "emitter": {
                  "memory.networkValues": "transformers.obtainRandomNumbers(io.http.responses.random)",
                  "io.http.responses.random": null
                }
              }
            ],
            "switch": "if"
          }
        ],
        "switch": "doInParallel"
      },
      "io": {
        "layers": [
          {
            "name": "html",
            "type": "html"
          }
        ]
      }
    }
  }
}
