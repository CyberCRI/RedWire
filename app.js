// Generated by CoffeeScript 1.6.3
/* Constants*/


(function() {
  var CODE_CHANGE_TIMEOUT, EDITOR_URL_PAIRS, EVAL_ASSETS, MODEL_FORMATTING_INDENTATION, MessageType, SPINNER_OPTS, adjustEditorToSize, automaticallyUpdatingModel, clearCodeInCache, clearMessage, currentActions, currentAssets, currentExpressionEvaluator, currentFrame, currentLayout, currentLoadedAssets, currentModel, currentModelData, currentServices, currentTools, editors, evalLoadedAssets, executeCode, getFormattedTime, globals, handleAnimation, handleResize, isPlaying, loadCodeFromCache, loadIntoEditor, log, logWithPrefix, notifyCodeChange, registerService, reloadCode, requestAnimationFrame, resetLogContent, saveCodeToCache, services, setCodeFromCache, setupButtonHandlers, setupEditor, setupLayout, showMessage, spinner, togglePlayMode, zeroPad,
    __slice = [].slice;

  globals = this;

  CODE_CHANGE_TIMEOUT = 1000;

  MODEL_FORMATTING_INDENTATION = 2;

  MessageType = GE.makeConstantSet("Error", "Info");

  SPINNER_OPTS = {
    lines: 9,
    length: 7,
    width: 4,
    radius: 10,
    corners: 1,
    rotate: 0,
    color: '#000',
    speed: 1,
    trail: 60,
    shadow: false,
    hwaccel: false,
    className: 'spinner',
    zIndex: 2e9,
    top: 'auto',
    left: 'auto'
  };

  EVAL_ASSETS = {
    underscore: "lib/underscore/underscore.js",
    gamEvolveCommon: "gamEvolveCommon.js",
    sylvester: "lib/sylvester/sylvester.src.js"
  };

  EDITOR_URL_PAIRS = [["modelEditor", "model.json"], ["assetsEditor", "assets.json"], ["actionsEditor", "actions.js"], ["toolsEditor", "tools.js"], ["layoutEditor", "layout.json"], ["servicesEditor", "services.json"]];

  /* Globals*/


  editors = {};

  log = null;

  evalLoadedAssets = [];

  services = {};

  spinner = new Spinner(SPINNER_OPTS);

  currentModel = new GE.Model();

  currentFrame = 0;

  currentModelData = null;

  currentAssets = null;

  currentActions = null;

  currentTools = null;

  currentLayout = null;

  currentServices = null;

  currentLoadedAssets = null;

  currentExpressionEvaluator = null;

  isPlaying = false;

  automaticallyUpdatingModel = false;

  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  /* Functions*/


  adjustEditorToSize = function(editor) {
    var characterWidth, contentWidth, limit, session;
    session = editor.session;
    editor.resize();
    if (session.getUseWrapMode()) {
      characterWidth = editor.renderer.characterWidth;
      contentWidth = editor.renderer.scroller.clientWidth;
      if (contentWidth > 0) {
        limit = parseInt(contentWidth / characterWidth, 10);
        return session.setWrapLimitRange(limit, limit);
      }
    }
  };

  handleResize = function() {
    var editor, editorName;
    for (editorName in editors) {
      editor = editors[editorName];
      adjustEditorToSize(editor);
    }
    return adjustEditorToSize(log);
  };

  showMessage = function(messageType, message) {
    switch (messageType) {
      case MessageType.Error:
        $("#topAlertMessage").html(message);
        return $("#topAlert").show();
      case MessageType.Info:
        $("#topInfoMessage").html(message);
        return $("#topInfo").show();
      default:
        throw new Error("Incorrect messageType");
    }
  };

  clearMessage = function() {
    return $("#topAlert, #topInfo").hide();
  };

  logWithPrefix = function() {
    var logType, value, valueStrings, values;
    logType = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (GE.logLevels[logType]) {
      log.clearSelection();
      log.navigateFileEnd();
      valueStrings = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          value = values[_i];
          if (_.isString(value)) {
            _results.push(value);
          } else {
            _results.push(JSON.stringify(value));
          }
        }
        return _results;
      })();
      return log.insert(logType + ": " + getFormattedTime() + " " + valueStrings.join("  ") + "\n");
    } else {
      return logWithPrefix(GE.logLevels.ERROR, "Bad logType parameter '" + logType + "' in log for message '" + message + "'");
    }
  };

  togglePlayMode = function() {
    var editor, editorId;
    if (isPlaying) {
      isPlaying = false;
      for (editorId in editors) {
        editor = editors[editorId];
        editor.setReadOnly(false);
        $('#' + editorId).fadeTo('slow', 1);
      }
      return $("#playButton").button("option", {
        label: "Play",
        icons: {
          primary: "ui-icon-play"
        }
      });
    } else {
      isPlaying = true;
      for (editorId in editors) {
        editor = editors[editorId];
        editor.setReadOnly(true);
        $('#' + editorId).fadeTo('slow', 0.2);
      }
      handleAnimation();
      return $("#playButton").button("option", {
        label: "Pause",
        icons: {
          primary: "ui-icon-pause"
        }
      });
    }
  };

  setupLayout = function() {
    $("#saveButton").button({
      icons: {
        primary: "ui-icon-transferthick-e-w"
      }
    });
    $("#shareButton").button({
      icons: {
        primary: "ui-icon-link"
      }
    });
    $("#playButton").button({
      icons: {
        primary: "ui-icon-play"
      },
      text: false
    });
    $("#timeSlider").slider({
      orientation: "horizontal",
      range: "min",
      min: 0,
      max: 0,
      step: 1,
      value: 0
    });
    $("#resetButton").button({
      icons: {
        primary: "ui-icon-arrowreturnthick-1-w"
      },
      text: false
    });
    $("#west").tabs();
    $("#south").tabs().addClass("ui-tabs-vertical ui-helper-clearfix");
    $("#south li").removeClass("ui-corner-top").addClass("ui-corner-left");
    $("#south li a").click(handleResize);
    return $('body').layout({
      north__resizable: false,
      north__closable: false,
      north__size: 50,
      west__size: 300,
      applyDefaultStyles: true,
      onresize: handleResize
    });
  };

  setupButtonHandlers = function() {
    $("#playButton").on("click", togglePlayMode);
    $("#resetButton").on("click", function() {
      currentFrame = 0;
      currentModel = currentModel.atVersion(0);
      resetLogContent();
      $("#timeSlider").slider("option", {
        value: 0,
        max: 0
      });
      automaticallyUpdatingModel = true;
      editors.modelEditor.setValue(JSON.stringify(currentModel.data, null, MODEL_FORMATTING_INDENTATION));
      editors.modelEditor.selection.clearSelection();
      automaticallyUpdatingModel = false;
      return executeCode();
    });
    return $("#timeSlider").on("slide", function() {
      currentFrame = $(this).slider("value");
      return GE.doLater(function() {
        automaticallyUpdatingModel = true;
        editors.modelEditor.setValue(JSON.stringify(currentModel.atVersion(currentFrame).data, null, MODEL_FORMATTING_INDENTATION));
        editors.modelEditor.selection.clearSelection();
        automaticallyUpdatingModel = false;
        return executeCode();
      });
    });
  };

  setupEditor = function(id, mode) {
    var editor;
    if (mode == null) {
      mode = "";
    }
    editor = ace.edit(id);
    if (mode) {
      editor.getSession().setMode(mode);
    }
    editor.getSession().setUseWrapMode(true);
    editor.setWrapBehavioursEnabled(true);
    return editor;
  };

  loadIntoEditor = function(editor, url) {
    return $.ajax({
      url: url,
      dataType: "text",
      cache: false,
      success: function(data) {
        editor.setValue(data);
        return editor.selection.clearSelection();
      }
    });
  };

  reloadCode = function(callback) {
    var actionsEvaluator, error, name, programId, service, serviceDef, serviceDefs, serviceName, toolsEvaluator, url,
      _this = this;
    programId = window.location.search.slice(1);
    try {
      currentAssets = JSON.parse(editors.assetsEditor.getValue());
      for (name in currentAssets) {
        url = currentAssets[name];
        currentAssets[name] = programId + url;
      }
    } catch (_error) {
      error = _error;
      logWithPrefix(GE.logLevels.ERROR, "Assets error. " + error);
      return showMessage(MessageType.Error, "<strong>Assets error.</strong> " + error);
    }
    try {
      currentModelData = JSON.parse(editors.modelEditor.getValue());
    } catch (_error) {
      error = _error;
      logWithPrefix(GE.logLevels.ERROR, "Model error. " + error);
      return showMessage(MessageType.Error, "<strong>Model error.</strong> " + error);
    }
    actionsEvaluator = GE.makeEvaluator.apply(GE, evalLoadedAssets);
    try {
      currentActions = actionsEvaluator(editors.actionsEditor.getValue());
    } catch (_error) {
      error = _error;
      logWithPrefix(GE.logLevels.ERROR, "Actions error. " + error);
      return showMessage(MessageType.Error, "<strong>Actions error.</strong> " + error);
    }
    toolsEvaluator = GE.makeEvaluator.apply(GE, evalLoadedAssets);
    try {
      currentTools = toolsEvaluator(editors.toolsEditor.getValue());
      currentTools.log = logWithPrefix;
    } catch (_error) {
      error = _error;
      logWithPrefix(GE.logLevels.ERROR, "Tools error. " + error);
      return showMessage(MessageType.Error, "<strong>Tools error.</strong> " + error);
    }
    try {
      currentLayout = JSON.parse(editors.layoutEditor.getValue());
    } catch (_error) {
      error = _error;
      logWithPrefix(GE.logLevels.ERROR, "Layout error. " + error);
      return showMessage(MessageType.Error, "<strong>Layout error.</strong> " + error);
    }
    try {
      serviceDefs = JSON.parse(editors.servicesEditor.getValue());
      for (serviceName in currentServices) {
        service = currentServices[serviceName];
        service.destroy();
      }
      currentServices = {};
      for (serviceName in serviceDefs) {
        serviceDef = serviceDefs[serviceName];
        currentServices[serviceName] = services[serviceDef.type](serviceDef.options);
      }
    } catch (_error) {
      error = _error;
      logWithPrefix(GE.logLevels.ERROR, "Services error. " + error);
      return showMessage(MessageType.Error, "<strong>Services error.</strong> " + error);
    }
    return GE.loadAssets(currentAssets, function(err, loadedAssets) {
      var evaluator, _i, _len, _ref;
      if (err != null) {
        logWithPrefix(GE.logLevels.ERROR, "Cannot load assets. " + err);
        showMessage(MessageType.Error, "Cannot load assets. " + err);
        return callback(err);
      }
      for (name in currentAssets) {
        url = currentAssets[name];
        if (GE.determineAssetType(url) === "JS") {
          _ref = [actionsEvaluator, toolsEvaluator];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            evaluator = _ref[_i];
            evaluator(loadedAssets[name]);
          }
        }
      }
      currentExpressionEvaluator = GE.makeEvaluator.apply(GE, evalLoadedAssets);
      currentLoadedAssets = loadedAssets;
      currentModel.atVersion(currentFrame).data = currentModelData;
      $("#timeSlider").slider("option", {
        value: currentFrame,
        max: currentFrame
      });
      logWithPrefix(GE.logLevels.INFO, "Game updated");
      showMessage(MessageType.Info, "Game updated");
      return callback(null);
    });
  };

  executeCode = function() {
    var error, modelAtFrame, modelPatches;
    modelAtFrame = currentModel.atVersion(currentFrame);
    try {
      modelPatches = GE.stepLoop({
        node: currentLayout,
        modelData: modelAtFrame.clonedData(),
        assets: currentLoadedAssets,
        actions: currentActions,
        tools: currentTools,
        services: currentServices,
        evaluator: currentExpressionEvaluator,
        log: logWithPrefix
      });
      if (modelPatches.length > 0) {
        logWithPrefix(GE.logLevels.LOG, "Model patches are: " + (JSON.stringify(modelPatches)) + ".");
      }
      return modelAtFrame.applyPatches(modelPatches);
    } catch (_error) {
      error = _error;
      logWithPrefix(GE.logLevels.ERROR, "Error executing code: " + error);
      showMessage(MessageType.Error, "Error executing code");
      if (isPlaying) {
        togglePlayMode();
      }
      return currentModel;
    }
  };

  notifyCodeChange = function() {
    var timeoutCallback;
    if (automaticallyUpdatingModel) {
      return false;
    }
    timeoutCallback = function() {
      spinner.stop();
      saveCodeToCache();
      return reloadCode(function(err) {
        if (!err) {
          return executeCode();
        }
      });
    };
    spinner.spin($("#north")[0]);
    clearMessage();
    if (notifyCodeChange.timeoutId) {
      window.clearTimeout(notifyCodeChange.timeoutId);
      notifyCodeChange.timeoutId = null;
    }
    return notifyCodeChange.timeoutId = window.setTimeout(timeoutCallback, CODE_CHANGE_TIMEOUT);
  };

  handleAnimation = function() {
    if (!isPlaying) {
      return false;
    }
    currentModel = executeCode();
    currentFrame++;
    $("#timeSlider").slider("option", {
      value: currentFrame,
      max: currentFrame
    });
    automaticallyUpdatingModel = true;
    editors.modelEditor.setValue(JSON.stringify(currentModel.data, null, MODEL_FORMATTING_INDENTATION));
    editors.modelEditor.selection.clearSelection();
    automaticallyUpdatingModel = false;
    return requestAnimationFrame(handleAnimation);
  };

  saveCodeToCache = function(programId) {
    var cachedCodeJson, codeToCache, editor, id;
    codeToCache = {};
    for (id in editors) {
      editor = editors[id];
      codeToCache[id] = editor.getValue();
    }
    cachedCodeJson = JSON.stringify(codeToCache);
    return localStorage.setItem(programId, cachedCodeJson);
  };

  loadCodeFromCache = function(programId) {
    return localStorage.getItem(programId);
  };

  setCodeFromCache = function(cachedCodeJson) {
    var cachedCode, editor, id, _results;
    cachedCode = JSON.parse(cachedCodeJson);
    _results = [];
    for (id in editors) {
      editor = editors[id];
      editor.setValue(cachedCode[id]);
      _results.push(editor.selection.clearSelection());
    }
    return _results;
  };

  clearCodeInCache = function(programId) {
    return localStorage.removeItem(programId);
  };

  registerService = function(name, factory) {
    return services[name] = factory;
  };

  globals.registerService = registerService;

  resetLogContent = function() {
    logWithPrefix(GE.logLevels.WARN, "Log content is being reset");
    log.setValue("");
    log.clearSelection();
    return logWithPrefix(GE.logLevels.INFO, "Reset log");
  };

  zeroPad = function(number) {
    if (number < 10) {
      return "0" + number;
    } else {
      return number;
    }
  };

  getFormattedTime = function() {
    var date;
    date = new Date();
    return "" + (zeroPad(date.getHours())) + ":" + (zeroPad(date.getMinutes())) + ":" + (zeroPad(date.getSeconds()));
  };

  /* Main*/


  $(document).ready(function() {
    var ajaxRequests, cachedCodeJson, id, loadedCode, programId, url, _i, _len, _ref;
    if (!window.location.search) {
      return window.location.search = "?optics/";
    }
    programId = window.location.search.slice(1);
    setupLayout();
    setupButtonHandlers();
    $(window).on("onresize", handleResize);
    _ref = ["modelEditor", "assetsEditor", "actionsEditor", "toolsEditor", "layoutEditor", "servicesEditor"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      id = _ref[_i];
      editors[id] = setupEditor(id, "ace/mode/javascript");
    }
    log = setupEditor("log");
    log.setReadOnly(true);
    resetLogContent();
    loadedCode = false;
    cachedCodeJson = loadCodeFromCache(programId);
    if (cachedCodeJson) {
      if (window.confirm("You had made changes to this code. Should we load your last version?")) {
        setCodeFromCache(cachedCodeJson);
        loadedCode = true;
      } else {
        clearCodeInCache(programId);
      }
    }
    if (!loadedCode) {
      ajaxRequests = (function() {
        var _j, _len1, _ref1, _results;
        _results = [];
        for (_j = 0, _len1 = EDITOR_URL_PAIRS.length; _j < _len1; _j++) {
          _ref1 = EDITOR_URL_PAIRS[_j], id = _ref1[0], url = _ref1[1];
          _results.push(loadIntoEditor(editors[id], "" + programId + url));
        }
        return _results;
      })();
      return $.when.apply($, ajaxRequests).fail(function() {
        return showMessage(MessageType.Error, "Cannot load game files");
      }).then(function() {
        return GE.loadAssets(EVAL_ASSETS, function(err, loadedAssets) {
          var name, script, _j, _len1, _ref1;
          if (err) {
            return showMessage(MessageType.Error, "Cannot load common assets");
          }
          evalLoadedAssets = (function() {
            var _results;
            _results = [];
            for (name in loadedAssets) {
              script = loadedAssets[name];
              _results.push(script);
            }
            return _results;
          })();
          _ref1 = ["modelEditor", "assetsEditor", "actionsEditor", "toolsEditor", "layoutEditor", "servicesEditor"];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            id = _ref1[_j];
            editors[id].getSession().on("change", function() {
              return notifyCodeChange();
            });
          }
          return notifyCodeChange();
        });
      });
    }
  });

}).call(this);
